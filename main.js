(()=>{"use strict";const e=new class{constructor(){this._gameBoard=["","","","","","","","",""]}get gameBoard(){return this._gameBoard}set gameBoard(e){this._gameBoard=e}addToGameBoard=(e,r)=>{this._gameBoard.splice(e,1,r)};isGameBoardFull=()=>9===this._gameBoard.length&&!this._gameBoard.includes("");printGameBoard=()=>{console.log(`\n         ${this._gameBoard[0]} | ${this._gameBoard[1]} | ${this._gameBoard[2]}\n        ---+---+---\n         ${this._gameBoard[3]} | ${this._gameBoard[4]} | ${this._gameBoard[5]}\n        ---+---+---\n         ${this._gameBoard[6]} | ${this._gameBoard[7]} | ${this._gameBoard[8]}\n        `)};emptyGameBoard=()=>{for(let e=0;e<this._gameBoard.length;e++)this._gameBoard[e]=""}};class r{constructor(e,r){this._name=e,this._playerSymbol=r,this._score=0}get name(){return this._name}set name(e){this._name=e}get playerSymbol(){return this._playerSymbol}set playerSymbol(e){this._playerSymbol=e}get score(){return this._score}set score(e){this._score=e}}const a=new class{constructor(){this._player1=new r("player1","X"),this._player2=new r("player2","O"),this._playerTurn=this._player1}get playerOne(){return this._player1}get playerTwo(){return this._player2}set playerOne(e){this._player1=e}set playerTwo(e){this._player2=e}get playerTurn(){return this._playerTurn}set playerTurn(e){this._playerTurn=e}determineResult=()=>{let r=e.gameBoard;const a=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(let e=0;e<a.length;e++){const[t,s,l]=a[e],n=r[t],i=r[s],o=r[l];if(""!==n&&n===i&&i===o)return"WIN!"}return e.isGameBoardFull()?"TIE!":""};startGameApp=(r,a)=>{e.emptyGameBoard(),this.createNewPlayers(r,a)};createNewPlayers=(e,r)=>{this._player1.name=e,this._player2.name=r};addSymbolToGameBoard=(r,a)=>{e.addToGameBoard(r,a)};isGameBoardCellFull=r=>""!==e.gameBoard[r];switchPlayerTurn=()=>{this._playerTurn.name==this._player1.name?this._playerTurn=this._player2:this._playerTurn=this._player1};restartGame=()=>{e.emptyGameBoard(),this._playerTurn=this._player1};incrementPlayerScore=e=>{e.name==this._player1.name?this._player1.score+=1:this._player2.score+=1}},t=new class{constructor(){this._playerOneInput=document.querySelector("#player-one"),this._playerTwoInput=document.querySelector("#player-two"),this._gameForm=document.querySelector(".game-form"),this._gameBoard=document.querySelector(".game-board"),this._cells=document.querySelectorAll(".cell"),this._scoreDisplay=document.querySelector(".score-display"),this._playerNameForm=document.querySelector("#player-name-form"),this._resultParagraph=document.querySelector(".winner-paragraph"),this._restartButton=document.querySelector(".restart-button"),this._restartButton.addEventListener("click",this.restartButtonClickHandler),this._cells=document.querySelectorAll(".cell"),this._playerOneNameSpan=document.querySelector("#player-one-name"),this._playerOneScoreSpan=document.querySelector("#player-one-score"),this._playerTwoNameSpan=document.querySelector("#player-two-name"),this._playerTwoScoreSpan=document.querySelector("#player-two-score")}startGameAppUI=()=>{this._playerNameForm.addEventListener("submit",(e=>{let r=this._playerOneInput.value,t=this._playerTwoInput.value;a.startGameApp(r,t),this._gameForm.style.display="none",this._gameBoard.style.display="block",e.preventDefault(),this.startGameUI()}))};startGameUI=()=>{this.displayPlayerTurn(a.playerTurn),this.displayPlayersScore(a.playerOne,a.playerTwo),this._scoreDisplay.hidden=!1,this._cells.forEach((e=>{e.removeEventListener("click",this.cellClickHandler)})),this._cells.forEach((e=>{e.addEventListener("click",this.cellClickHandler)}))};cellClickHandler=e=>{const r=e.target,t=r.getAttribute("data-cell-index"),s=a.playerTurn;if(a.isGameBoardCellFull(t))return void alert("This Cell is Full");this.displaySymbolToGame(r,s.playerSymbol),a.addSymbolToGameBoard(t,s.playerSymbol);let l=a.determineResult();this.displayResult(s,l),a.switchPlayerTurn(),this.displayPlayersScore(a.playerOne,a.playerTwo),this.displayPlayerTurn(a.playerTurn)};restartButtonClickHandler=()=>{a.restartGame(),this.resetGameDisplay(),this.startGameUI()};displaySymbolToGame=(e,r)=>{const a=document.createElement("p");a.textContent=r,e.appendChild(a)};displayResult=(e,r)=>{""!==r&&("WIN!"===r?(this._resultParagraph.innerHTML="Winner is "+e.name,a.incrementPlayerScore(e)):"TIE!"===r&&(this._resultParagraph.innerHTML=r),this._resultParagraph.hidden=!1,this._restartButton.hidden=!1,this._cells.forEach((e=>{e.classList.add("disabled")})))};displayPlayerTurn=e=>{const r=document.querySelector(".player-turn-header");r.innerHTML=`Player Turn: ${e.name} (${e.playerSymbol})`,r.hidden=!1};resetGameDisplay=()=>{this._cells.forEach((e=>{e.innerHTML="",e.classList.remove("disabled")})),this._resultParagraph.hidden=!0,this._restartButton.hidden=!0};displayPlayersScore=(e,r)=>{this._playerOneNameSpan.innerHTML=e.name,this._playerOneScoreSpan.innerHTML=e.score,this._playerTwoNameSpan.innerHTML=r.name,this._playerTwoScoreSpan.innerHTML=r.score}};document.addEventListener("DOMContentLoaded",(()=>{t.startGameAppUI()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,